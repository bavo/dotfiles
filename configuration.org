#+TITLE My Emacs configuration

* Package manager
** Melpa
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
#+END_SRC
** Use package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
   
Always ensure packages are installed. If not, they will be downloaded from elpa. 
#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

* UI elements
** disable toolbar and menubar
 #+BEGIN_SRC emacs-lisp
   (tool-bar-mode 0)
   (menu-bar-mode 0)
   (setq inhibit-startup-screen t)
   (when window-system
     (scroll-bar-mode -1))
 #+END_SRC

* Org mode
** Set org mode exporters
#+BEGIN_SRC emacs-lisp
  (setq org-export-backends '(ascii html latex beamer md odt asciidoc org)) 

#+END_SRC

** use org mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config (setq org-src-fontify-natively t
                  org-todo-keywords '((sequence "TODO(t)" "BLOC(b)" "TEST(e)" "DONE(d)"))
                  org-todo-keyword-faces '(("BLOC" . "red")
                                           ("TEST" . "yellow"))
                  org-archive-location "/home/bavo/Magda/Org/archive.org_archive::"))
#+END_SRC

** use fancy bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init (progn
            (setq org-mode-hook ())
            (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
#+END_SRC
   
** Set agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Magda/Org/"))
#+END_SRC

** Set custom task templates
   Fist off, bind the =C-c c= key to the =org-capture= command
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c c") 'org-capture)
   #+END_SRC
   
   Next configure the templates that we are going to use: 
   - JIRA: add a new jira to the timetracking file
   #+BEGIN_SRC emacs-lisp
     (setq org-capture-templates
           '(("j" "Jira" entry (file+headline "/home/bavo/Magda/Org/timetracking.org" "TODO'S") (file "/home/bavo/Magda/Org/capture-templates/jira.org"))
             ("d" "Businessdienst" entry (file+headline "/home/bavo/Magda/Org/timetracking.org" "TODO'S") (file "/home/bavo/Magda/Org/capture-templates/businessdienst.org"))
             ("b" "Baseline" entry (file+headline "/home/bavo/Magda/Org/timetracking.org" "TODO'S") (file "/home/bavo/Magda/Org/capture-templates/baseline.org"))
             ("t" "TODO" entry (file+headline "/home/bavo/Magda/Org/timetracking.org" "TODO'S") "** TODO %^{Title}\n %^{description}")
             ("m" "Meeting" entry (file+headline "/home/bavo/Magda/Org/timetracking.org" "Meetings") "** %^{Title}\n   SCHEDULED: %^T")))
   #+END_SRC
   
   Lastly configure the refiling parameteres. These parameters should
   allow us to refile jira to subtrees. 
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-targets '((nil :maxlevel . 2))
           org-outline-path-complete-in-steps nil
           org-refile-use-outline-path t)
   #+END_SRC
   
** make custom clock print function
   #+BEGIN_SRC emacs-lisp
     (defun my:print-clocked-time ()
       "Print the time of the currently clocked task"
       (interactive)
       (require 'org-clock)
       (if (org-clocking-p)
           (s-concat org-clock-heading)
         (s-concat "slacking")))
   #+END_SRC
   
** org agenda
#+BEGIN_SRC emacs-lisp
  (require 'org-agenda)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (define-key org-agenda-mode-map "j" 'org-agenda-next-item)
  (define-key org-agenda-mode-map "k" 'org-agenda-previous-item)

  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((agenda "")
            (todo "BLOC")
            (todo "TODO")))))
#+END_SRC

Create bind F6 to my custom agenda view 
#+BEGIN_SRC emacs-lisp
  (defun my:pop-to-org-agenda (&optional split)
    "Visit the org agenda, in the current window or a SPLIT."
    (interactive "P")
    (org-agenda nil "c")
    (when (not split)
      (delete-other-windows)))
#+END_SRC
* Autocomplete 
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :config (ac-config-default))
#+END_SRC
* spaceline
  Use spaceline for showing all the information in the bottom
#+BEGIN_SRC emacs-lisp
  (defun start-nyan-if-not-in-terminal()
    "start nyan cat mode if it can be displayed"
    (when (display-graphic-p)
      (nyan-mode)
      (nyan-start-animation)))

  (defun load-spaceline-theme()
    "load the spaceline theme"
    (progn
      (load-theme 'spacemacs-dark t)
      (start-nyan-if-not-in-terminal)
      (spaceline-compile)))

  (defun load-spaceline-theme-or-add-hook-to-load ()
    "load the spaceline theme or add a hook to load it" 
    (if (daemonp)
        (add-hook 'after-make-frame-functions
                  (lambda (frame)
                    (select-frame frame)
                    (if (window-system frame)
                        (unless my:theme-window-loaded
                          (if my:theme-terminal-loaded
                              (enable-theme 'spacemacs-dark)
                            (load-spaceline-theme))
                          (setq my:theme-window-loaded t))
                      (unless my:theme-terminal-loaded
                        (if my:theme-window-loaded
                            (enable-theme 'spacemacs-dark)
                          (load-spaceline-theme))
                        (setq my:theme-terminal-loaded) t)))))
    (progn
      (load-spaceline-theme)
      (if (display-graphic-p)
          (setq my:theme-window-loaded t)
        (setq my:theme-terminal-loaded t))))

  (use-package spaceline
    :init (setq my:theme-window-loaded nil
                my:theme-terminal-loaded nil)
    :config
    (progn
      (require 'spaceline-config)
      (spaceline-spacemacs-theme)
      (setq powerline-height 20
            powerline-default-separator 'wave
            spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
      (spaceline-toggle-minor-modes-off)
      (load-spaceline-theme-or-add-hook-to-load)
      (spaceline-helm-mode)))

#+END_SRC
* =evil= 
** =evil-leader=
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
               :config (progn
                         (global-evil-leader-mode)
                         (evil-leader/set-leader "<SPC>")
                         (evil-leader/set-key
                           "fe" 'open-config-file
                           "bl" 'helm-mini
			   "y"  'clipboard-kill-ring-save)))
#+END_SRC
** =evil-mode=
#+BEGIN_SRC emacs-lisp
  (use-package evil
               :config (progn
                         (evil-mode 1)
                         (setq x-select-enable-clipboard nil
                               x-select-enable-primary t)
                         (evil-set-initial-state 'calendar-mode 'emacs)))
#+END_SRC
** =evil-numbers=
#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
               :bind (("C-c +" . evil-numbers/inc-at-pt)
                      ("C-c -" . evil-numbers/dec-at-pt)))

#+END_SRC
** =evil-surround=
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
               :config (global-evil-surround-mode))
#+END_SRC
** =evil-matchit=
#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
    :config (global-evil-matchit-mode 1))
#+END_SRC
** =evil-replace-with-register=
#+BEGIN_SRC emacs-lisp
  (use-package evil-replace-with-register
    :config (progn
              (setq evil-replace-with-register-key (kbd "gr"))
              (evil-replace-with-register-install)))
#+END_SRC

** =evil-indent-plus=
#+BEGIN_SRC emacs-lisp
  (use-package evil-indent-plus
    :config (evil-indent-plus-default-bindings))
#+END_SRC
** Esc exits everything
   #+BEGIN_SRC emacs-lisp
     ;;; esc quits
     (defun minibuffer-keyboard-quit ()
       "Abort recursive edit.
     In Delete Selection mode, if the mark is active, just deactivate it;
     then it takes a second \\[keyboard-quit] to abort the minibuffer."
       (interactive)
       (if (and delete-selection-mode transient-mark-mode mark-active)
           (setq deactivate-mark  t)
         (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
         (abort-recursive-edit)))
     (define-key evil-normal-state-map [escape] 'keyboard-quit)
     (define-key evil-visual-state-map [escape] 'keyboard-quit)
     (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
   #+END_SRC
** Switch to last buffer
set C-tab to switch to the last buffer
  #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "<C-tab>") 'evil-switch-to-windows-last-buffer)
  #+END_SRC
** Open config file
Opens my configuration file when i want to
#+BEGIN_SRC emacs-lisp
  (defun open-config-file ()
    "opens the configuration file"
    (interactive)
    (switch-to-buffer (find-file "~/.emacs.d/configuration.org")))
#+END_SRC

** Open zsh terminal
Open the zsh terminal without asking for confirmation
#+BEGIN_SRC emacs-lisp
  (defun open-zsh-terminal ()
    "Open a new zsh terminal in emacs"
    (interactive)
    (term "/bin/zsh"))
#+END_SRC

** Disable evil with certain states
#+BEGIN_SRC emacs-lisp
  (evil-set-initial-state 'tetris 'emacs)
  (evil-set-initial-state 'bubbles 'emacs)
  (evil-set-initial-state 'dun-mode 'emacs)
  (evil-set-initial-state 'pong 'emacs)
#+END_SRC

* helm 
  Use =helm= for everything
#+BEGIN_SRC emacs-lisp
  (use-package helm
               :config (progn
                         (require 'helm-config)
                         (helm-mode 1)
                         (setq helm-buffers-fuzzy-matching t
                               helm-recentf-fuzzy-match t))
               :bind (("M-x"     . helm-M-x)
                      ("C-x C-f" . helm-find-files)
                      ("C-c h"   . helm-command-prefix)))
#+END_SRC

* Magit
Magit a porcelain git editor (as said by the author). But this is by far the best
git tool i've ever seen. 
#+BEGIN_SRC emacs-lisp
  (use-package magit)
  (use-package evil-magit
       :config (progn 
                 (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1
                       magit-log-arguments '("--graph" "--color" "--decorate" "-n256")
                       vc-follow-symlinks t)
                 (global-set-key (kbd "C-x g") 'magit-status)))
#+END_SRC

* Rainbow delimiters
I use rainbow delimiter for programming elisp. Could not do it without it.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
               :init (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Which key
  describe the possible keybindings when pressing part of a combination
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC
* Mode configuration
Configure which mode must be enabled when opening a specific filetype.
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.adoc\\'" . adoc-mode))
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-mode))
(add-to-list 'auto-mode-alist '("\\.out\\'" . auto-revert-mode))
#+END_SRC

* Ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :config (progn
              (setq aw-keys '(?q ?s ?d ?f ?g ?h ?j ?k ?l ?m))
              (evil-leader/set-key "w" 'ace-window)))
#+END_SRC


** Don't delete last window
   Create a new function that ask confirmation when killing the last
   buffer. When trying to close the last buffer, the editor will ask
   to kill the buffer instead. 
#+BEGIN_SRC emacs-lisp
  (defun my:quit-buffer ()
    "Custom quit function that does not kill the last buffer. Instead it asks to kill the buffer isntead."
    (interactive)
    (if (one-window-p)
        (if (y-or-n-p "Only one window open, kill buffer instead?")
            (kill-buffer)
          (delete-frame))
      (delete-window)))

  (defun my:save-and-quit-buffer ()
    "save buffer and the call my custom quit function"
    (interactive)
    (save-buffer)
    (my:quit-buffer))

  (eval-after-load 'evil-ex
    '(progn
       (evil-ex-define-cmd "q[uit]" 'my:quit-buffer)
       (evil-ex-define-cmd "wq" 'my:save-and-quit-buffer)))
#+END_SRC

* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :config (projectile-global-mode))

    (use-package helm-projectile
      :config (progn
                (setq projectile-completion-system 'helm
                      projectile-enable-caching t
                      compilation-scroll-output 'first-error
                      projectile-globally-ignored-files (append
                                                         '("target/") projectile-globally-ignored-files))
                (helm-projectile-on)))
  #+END_SRC
* Backup 
  Set a custom backup dir so my files dont get cluttered
#+BEGIN_SRC emacs-lisp
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "/home/bavo/.emacs-backup")) ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups

#+END_SRC 
* Mail
  Use notmuch as a mail client
#+BEGIN_SRC emacs-lisp
  (use-package notmuch
    :config (progn
              (setq notmuch-search-oldest-first nil
                             notmuch-multipart/alternative-discouraged '("text/plain" "text/html")
                             notmuch-fcc-dirs "Sent +sent -inbox"
                             notmuch-maildir-use-notmuch-insert t
                             user-mail-address "bavo.mees@esfds.com"
                             user-full-name "Bavo Mees"
                             mail-host-address "esfds.com"
                             mail-specify-envelope-from t
                             message-kill-buffer-on-exit t
                             message-send-mail-function 'message-send-mail-with-sendmail)

              ; Use =evil= mode inside notmuch
              (evil-set-initial-state 'notmuch-tree-mode 'normal)
              (evil-set-initial-state 'notmuch-search-mode 'normal)
              (evil-set-initial-state 'notmuch-hello-mode 'normal)
              (evil-set-initial-state 'notmuch-message-mode 'normal)
              (evil-set-initial-state 'notmuch-show-mode 'normal)

              (evil-define-key 'normal notmuch-show-mode-map
                "q" 'notmuch-bury-or-kill-this-buffer)

              (evil-define-key 'normal notmuch-hello-mode-map
                "q" 'notmuch-bury-or-kill-this-buffer
                "s" 'notmuch-search
                "g" 'notmuch-poll-and-refresh-this-buffer
                "u" (lambda () (interactive) (notmuch-search "tag:unread"))
                "i" (lambda () (interactive) (notmuch-search "tag:inbox")))

              (evil-define-key 'normal notmuch-search-mode-map
                "q" 'notmuch-bury-or-kill-this-buffer
                "s" 'notmuch-search
                "g" 'notmuch-poll-and-refresh-this-buffer
                "+" 'notmuch-show-add-tag
                "-" 'notmuch-show-remove-tag
                [return] 'notmuch-search-show-thread)

              (evil-define-key 'normal notmuch-show-mode-map
                "n" 'notmuch-show-next-open-message
                "N" 'notmuch-show-next-thread-show
                "g" 'notmuch-poll-and-refresh-this-buffer
                "r" 'notmuch-show-reply-sender
                "+" 'notmuch-show-add-tag
                "-" 'notmuch-show-remove-tag
                "R" 'notmuch-show-reply
                [return] 'notmuch-show-toggle-message))

    :bind (("C-c m" . notmuch)))

#+END_SRC
* Calendar/Agenda
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'calendar)
  (define-key evil-normal-state-map (kbd "<f6>") 'my:pop-to-org-agenda)
  (add-hook 'calendar-load-hook
            (lambda ()
              (calendar-set-date-style 'european)))
  (setq calendar-week-start-day 1)
#+END_SRC
* Slack
#+BEGIN_SRC emacs-lisp
  (use-package slack
    :commands (slack-start)
    :init (setq slack-prefer-current-team t
		slack-buffer-emojify t)
    :config (progn (slack-register-team
                    :name "magdavo"
                    :default t
                    :client-id "110859563911.176333687526"
                    :client-secret 
                    :token 
                    :subscribed-channels '(general random))))

  (use-package alert
    :commands (alert)
    :init (setq default-style 'notifier))

#+END_SRC
* MAGDA stuff
** Open a specific logging location
   Function to open specific logging locations. All the locations should be configured in the logging-locations variable.
   This is a AList with the name of the location as a key and the command to open the logging file as value.
   #+BEGIN_SRC emacs-lisp
     (setq logging-locations
           '(("magdagui-dev" . "/ssh:magdagui-dev:/data/tomcat/domains/magdagui/logs/magdagui.log")
             ("magdagui-tni" . "/ssh:magdagui-tni:/data/tomcat/domains/magdagui/logs/magdagui.log")
             ("ms-magda-priv-dienst-gw" . "/ssh:weblogic-dev:/export/home/weblogic/wl_servers/ms_magda_priv_dienst_gw_01/logs/ms_magda_priv_dienst_gw_01.out")
             ("ms-magda-ntpriv-dienst-gw" . "/ssh:weblogic-dev:/export/home/weblogic/wl_servers/ms_magda_ntpriv_dienst_gw_01/logs/ms_magda_ntpriv_dienst_gw_01.out")
             ("ms-magda-ntpriv-sched" . "/ssh:weblogic-dev:/export/home/weblogic/wl_servers/ms_magda_ntpriv_sched_01/logs/ms_magda_ntpriv_sched_01.out")
             ("SocZek.GeefLeefloonBedragen" . "/ssh:weblogic-dev:/var/opt/vipadmin/logs/soczek.geefleefloonbedragendienst-02.00/service.log")
             ("ms-magda-conn" . "/ssh:weblogic-dev:/export/home/weblogic/wl_servers/ms_magda_conn_01/logs/ms_magda_conn_01.out")
             ("ms-magda-admin" . "/ssh:weblogic-dev-admin:/export/weblogic/domains/magda_business/servers/AdminServer/logs/magda_business.log")))


     (defun open-logging ()
       "opens logging in a new async buffer. New logging locations can be configured in the logging-locations variable."
       (interactive)
       (let ((log (completing-read "Selecteer logging: " logging-locations)))
         (setq auto-revert-remote-files t)
         (setq auto-revert-interval 2)
         (auto-revert-mode)
         (switch-to-buffer (find-file (cdr (assoc log logging-locations))))
         (end-of-buffer)))
   #+END_SRC
** Open a list of personal JIRAs
   Open my TODOs for magda
#+BEGIN_SRC emacs-lisp
(defun open-jiras ()
  "opens a list of all my jira's in org mode"
  (interactive)
  (switch-to-buffer (find-file "~/Magda/JIRAS.org")))
#+END_SRC
